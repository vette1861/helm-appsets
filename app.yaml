# This applicationset will create an application for every chart in charts/* with values in values/*
# Each chart can set defaults to apply to all env clusters
# Each chart can set overrides to apply to specific env clusters
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: helm-poc-appset
  namespace: argocd
  annotations:
    argocd.argoproj.io/manifest-generate-paths: .. # Ensures charts path and values path is available for templating
spec:
  goTemplate: true
  generators:
    - matrix:
        generators:
          - git:
              repoURL: https://github.com/vette1861/helm-appsets.git
              revision: HEAD
              files:
              - path: "charts/**/defaults.yaml"
          - clusters:
              values:
                env:  '{{ .metadata.labels.env }}'
                envLength: '{{ sub (len .envList) 1 }}'
      # selector:
      #   matchExpressions:
      #   - key: 'envList[*].envName'
      #     operator: In
      #     values:
      #     - dev
        # matchLabels:
        #   envList.name: 'dev'
                # specialEnv: '{{ range $index, $env := .envList }}{{.name}}{{end}}'
                  # - '{{ range $index, $env := .envList }}{{if eq $index 0}}{{.name}}{{end}}{{end}}'
                  # - '{{ range $index, $env := .envList }}{{if eq $index 1}}{{.name}}{{end}}{{end}}'
                  # - '{{ range $index, $env := .envList }}{{if eq $index 2}}{{.name}}{{end}}{{end}}'
                  # - '{{ range $index, $env := .envList }}{{if eq $index 3}}{{.name}}{{end}}{{end}}'
                  # values: ['{{range $index, $env := .envList}}{{if ne $index 0}},{{end}}{{.name}}{{end}}']
              # values:
              #   clusterEnv: '{{ .metadata.labels.env }}'
      # selector:
      #   matchLabels:
      #     serviceType: autoDeployCoreService
  template:
    metadata:
      name: '{{ .app }}-{{ .metadata.labels.env }}-{{ .name }}'
      labels:
        app: '{{ .app }}'
        env: '{{ .metadata.labels.env }}'
        envLength: '{{ .values.envLength }}'
        envCheck: '{{ index .envList 0}}{{.envName}}'
        # env: "{{range .envList }}{{.env }}{{end}}"
        version: '{{ .chartVersion }}'
        path: '{{ .path.basename }}'
        serviceType: '{{ .serviceType }}'
    spec:
      project: default
      destination:
        server: '{{ .server }}'
        namespace: '{{ .namespace }}'
      source:
        helm:
          releaseName: '{{ .app }}'
          valueFiles: # Optional cluster values file and env values file
            - '/values/{{ .app }}/cluster/values-{{ .name }}.yaml'
            - '/values/{{ .app }}/env/values-{{ .metadata.labels.env }}.yaml'
          ignoreMissingValueFiles: true
        path: '{{ .path.path }}/version-{{ .chartVersion }}'
        repoURL: https://github.com/vette1861/helm-appsets.git
      syncPolicy:
        syncOptions:
          - CreateNamespace=true
          - ApplyOutOfSyncOnly=true